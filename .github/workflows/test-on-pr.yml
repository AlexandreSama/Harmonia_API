name: Run tests and Sonar on PR from test-all to develop

on:
  pull_request:
    branches:
      - test
    types: [opened, synchronize, reopened]

env:
  TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
  TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
  TWILIO_API_SECRET: ${{ secrets.TWILIO_API_SECRET }}

jobs:
  test-and-sonar:
    if: github.head_ref == 'test-all'
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: harmonia
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache Sonar packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Make mvnw executable
        run: chmod +x ./mvnw

      - name: Wait for MySQL to be ready
        run: |
          echo "‚è≥ Waiting for MySQL..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u root -proot --silent; then
              echo "‚úÖ MySQL is up!"
              break
            fi
            echo "Still waiting for MySQL... ($i)"
            sleep 2
          done

      - name: Run unit & integration tests (no Selenium) & SonarQube analysis
        run: ./mvnw verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=AlexandreSama_Harmonia_API -Dsonar.organization=alexandresama -Dtest=!**/*Selenium*Test
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/harmonia
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root

  discord_notif:
    name: Discord
    runs-on: ubuntu-latest
    needs: test-and-sonar
    continue-on-error: true
    if: always()  # <-- Important ici, toujours essayer d'envoyer

    steps:
      - name: Notify success on Discord
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: success
          content: "Hey <@256892994504884224> üéâ La PR a pass√© tous les tests !"
          title: "Tests OK ‚úÖ"
          description: "Tous les tests sur la Pull Request sont pass√©s. Merge tranquille üöÄ."
          image: ${{ secrets.EMBED_SUCCESS_URL }}
          color: 0x00ff00  # Vert
          url: ${{ github.event.pull_request.html_url }}
          username: GitHub Actions
          avatar_url: ${{ secrets.AVATAR_SUCCESS_URL }}

      - name: Notify failure on Discord
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: failure
          content: "Hey <@256892994504884224> ‚ùå Attention la PR a √©chou√© !"
          title: "Tests FAILED ‚ùå"
          description: "Certains tests ont √©chou√© sur la Pull Request. Check le CI vite."
          image: ${{ secrets.EMBED_FAILURE_URL }}
          color: 0xff0000  # Rouge
          url: ${{ github.event.pull_request.html_url }}
          username: GitHub Actions
          avatar_url: ${{ secrets.AVATAR_FAILURE_URL }}
